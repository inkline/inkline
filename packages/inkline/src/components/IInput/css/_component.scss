/**
 * Input
 */

@use '../../../css/mixins/components';
@use '../../../css/icons';

.input {
    display: block;
    vertical-align: middle;
    position: relative;
    flex-grow: 1;
    flex-shrink: 1;

    .input-field {
        @include components.background('input');
        @include components.border-width('input');
        @include components.border-style('input');
        @include components.border-color('input');
        @include components.border-radius('input');
        @include components.box-shadow('input');
        @include components.font-size('input');
        @include components.transition('input');

        position: relative;
        display: flex;
        flex: 1 0 auto;
        align-items: center;
        flex-direction: row;
        background-clip: padding-box;

        > input,
        > select,
        > textarea {
            @include components.color('input');
            @include components.line-height('input');
            @include components.padding('input');

            position: relative;
            flex: 1 0 auto;
            width: 1%;
            background: transparent;
            border: 0;
            margin: 0;
            outline: 0;

            // Remove style for the caret on `<select>`s in IE10+.
            &::-ms-expand {
                background-color: transparent;
                border: 0;
            }

            // Placeholder
            // Override Firefox's unusual default opacity see https://github.com/twbs/bootstrap/pull/11526.
            &::placeholder {
                @include components.color('input', 'placeholder', true);

                opacity: 1;
            }

            // Disabled and read-only inputs
            //
            // HTML5 says that controls under a fieldset > legend:first-child won't be
            // disabled if the fieldset is disabled. Due to implementation difficulty, we
            // don't honor that edge case we style them as disabled anyway.
            &:disabled,
            &[readonly] {
                opacity: 1; // iOS fix for unreadable disabled content
                cursor: default;
            }

            /**
             * Select
             */
            &[readonly]:focus {
                outline: 0;
            }
        }

        .input-prefix,
        .input-suffix {
            display: inline-flex;
            align-items: center;
            z-index: 1;
            font-style: normal;

            > button:not(.button, .select-caret) {
                background: transparent;
                border: 0;
                color: inherit;
            }
        }

        .input-prefix {
            @include components.border-right-width('input', 'prefix', true);
            @include components.border-right-style('input', 'prefix', true);
            @include components.border-color('input', 'prefix', true);
            @include components.color('input', 'prefix', true);
            @include components.padding-left('input', 'prefix', true);
            @include components.padding-right('input', 'prefix', true);
            @include components.transition('input', 'prefix', true);
        }

        .input-suffix {
            @include components.border-left-width('input', 'suffix', true);
            @include components.border-left-style('input', 'suffix', true);
            @include components.border-color('input', 'suffix', true);
            @include components.color('input', 'suffix', true);
            @include components.padding-left('input', 'suffix', true);
            @include components.padding-right('input', 'suffix', true);
            @include components.transition('input', 'suffix', true);
        }

        .input-icon {
            @include components.color('input', 'icon', true);
            @include components.transition('input', 'icon', true);
            @include components.width('input', 'icon');
            @include components.height('input', 'icon');

            cursor: pointer;
            width: auto;

            &:hover {
                @include components.color('input' 'icon', 'hover', true);
            }

            &:focus {
                @include components.color('input' 'icon', 'focus', true);
            }
        }
    }

    &.-hover,
    &:hover {
        .input-field {
            @include components.border-color('input', 'hover', true);
        }
    }

    // Customize the `:focus` state to imitate native WebKit styles.
    &.-focus .input-field,
    .input-field:focus-within {
        @include components.box-shadow('input', 'focus', true);
        @include components.border-color('input', 'focus', true);

        outline: 0;
    }

    .input-value-overlay {
        @include components.padding-left('input', 'value-overlay', true);
        @include components.padding-right('input', 'value-overlay', true);

        position: absolute;

        &,
        > * {
            cursor: default;
        }
    }

    .input-prepend,
    .input-append {
        display: flex;
        flex-flow: row nowrap;
        align-items: stretch;
        padding: 0;

        > * {
            display: flex;
            flex: auto 1 0;
            align-self: stretch;
            align-items: center;
            border-radius: 0;
        }

        > [class$='-wrapper'] {
            padding-left: 0;
            padding-right: 0;

            > [class$='-trigger'] {
                display: flex;
                align-self: stretch;
            }
        }
    }

    .input-prepend {
        @include components.background('input', 'prepend', true);
        @include components.font-size('input', 'prepend', true);
        @include components.line-height('input', 'prepend', true);
        @include components.transition('input', 'prepend', true);

        > * {
            @include components.padding-left('input', 'prepend', true);
            @include components.padding-right('input', 'prepend', true);
        }
    }

    .input-append {
        @include components.background('input', 'append', true);
        @include components.font-size('input', 'append', true);
        @include components.line-height('input', 'append', true);
        @include components.transition('input', 'append', true);

        > * {
            @include components.padding-left('input', 'append', true);
            @include components.padding-right('input', 'append', true);
        }
    }

    .input-prepend,
    .input-prepend > *:first-child {
        @include components.border-top-left-radius('input');
        @include components.border-bottom-left-radius('input');
    }

    .input-append,
    .input-append > *:last-child {
        @include components.border-top-right-radius('input');
        @include components.border-bottom-right-radius('input');
    }

    &.-prepended,
    &.-appended {
        display: flex;
        flex-wrap: nowrap;

        > .input-field {
            flex-shrink: 1;
        }
    }

    &.-prepended {
        > .input-field {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    &.-appended {
        > .input-field {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
    }

    &.-error {
        > .input-field {
            @include components.border-color('input', 'error', true);
        }
    }

    &.-readonly {
        > .input-field {
            &:focus-within {
                @include components.border-color('input', 'focus', true);

                outline: 0;
            }
        }
    }

    &.-disabled,
    &.-readonly {
        > .input-field {
            @include components.background('input', 'disabled', true);
            @include components.border-color('input', 'disabled', true);

            &:hover {
                @include components.border-color('input', 'disabled', true);
            }

            > input,
            > select,
            > textarea {
                &:disabled,
                &[readonly] {
                    @include components.color('input', 'disabled', true);
                }
            }
        }
    }
}
