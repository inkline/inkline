@use 'sass:math';

@import '../../css/variables';
@import '../../css/mixins';

// Prevent columns from becoming too narrow when at smaller grid tiers by
// always setting `width: 100%`. This works because we use `flex` values
// later on to override this initial width.
//
@mixin column-full-width() {
    flex-grow: 0;
    flex-basis: 100%;
    width: 100%;
}

// Create a flexible column that takes up the space it can
//
@mixin column-flexible() {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
}

// Add a `max-width` to ensure content within each column does not blow out
// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
// do not appear to require this.
//
@mixin column-fixed-width($columns, $columns-count) {
    flex-grow: 1;
    flex-basis: math.percentage(math.div($columns-count, $columns));
    max-width: math.percentage(math.div($columns-count, $columns));
}

/**
 * Column
 */
.col,
.column {
    @include column-flexible();

    box-sizing: border-box;
    min-height: 1px;
    position: relative;

    @each $breakpoint-key, $gutter-value in $gutters {
        @include breakpoint-up($breakpoint-key) {
            padding-left: calc(#{gutter($breakpoint-key)} / 2);
            padding-right: calc(#{gutter($breakpoint-key)} / 2);
        }
    }

    // Column Responsive Sizes
    //
    @each $breakpoint-key in $breakpoint-prefix-keys {
        $breakpoint: breakpoint-infix($breakpoint-key);

        @if $breakpoint-key != '_' {
            &.#{$breakpoint},
            &.#{$breakpoint}-auto {
                @include column-full-width();
            }
        }

        @include breakpoint-up($breakpoint-key) {
            @if $breakpoint-key != '_' {
                &.#{$breakpoint} {
                    @include column-flexible();
                }

                &.#{$breakpoint}-auto {
                    flex: 1 0 auto;
                    max-width: auto;
                }
            }

            &.-first#{$breakpoint} {
                order: -1;
            }

            &.-last#{$breakpoint} {
                order: 1;
            }
        }

        @for $column-count from 1 through $columns {
            @if $breakpoint-key != '_' {
                &.#{$breakpoint}-#{$column-count} {
                    @include column-full-width();
                }
            }

            @include breakpoint-up($breakpoint-key) {

                // Column width
                //
                @if $breakpoint-key != '_' {
                    &.#{$breakpoint}-#{$column-count} {
                        @include column-fixed-width($columns, $column-count);
                    }
                }

                // Column offset
                //
                &.-offset#{$breakpoint}-#{$column-count} {
                    margin-left: math.percentage(math.div($column-count, $columns));
                }

                // Column push
                //
                &.-push#{$breakpoint}-#{$column-count} {
                    left: math.percentage(math.div($column-count, $columns));
                }

                // Column pull
                //
                &.-pull#{$breakpoint}-#{$column-count} {
                    right: math.percentage(math.div($column-count, $columns));
                }
            }
        }

        @include breakpoint-up($breakpoint-key) {
            &.-offset#{$breakpoint}-0 {
                margin-left: 0;
            }

            &.-push#{$breakpoint}-0 {
                left: 0;
            }

            &.-pull#{$breakpoint}-0 {
                right: 0;
            }
        }
    }
}
